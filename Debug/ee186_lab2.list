
ee186_lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004a8  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000664  0800066c  0000166c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000664  08000664  0000166c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000664  08000664  0000166c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000664  0800066c  0000166c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000664  08000664  00001664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000668  08000668  00001668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000166c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0000166c  2**0
                  CONTENTS
 10 .bss          00000024  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000166c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000169  00000000  00000000  0000169c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000000f6  00000000  00000000  00001805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000058  00000000  00000000  00001900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000003a  00000000  00000000  00001958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000010cc  00000000  00000000  00001992  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000005dc  00000000  00000000  00002a5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000044f6  00000000  00000000  0000303a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00007530  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000a0  00000000  00000000  00007574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00007614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000000 	.word	0x20000000
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800064c 	.word	0x0800064c

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000004 	.word	0x20000004
 80001f8:	0800064c 	.word	0x0800064c

080001fc <main>:
#define RCC_CFGR (*(volatile uint32_t*)(RCC_BASE + 0x08))
#define RCC_APB1ENR1 (*(volatile uint32_t*)(RCC_BASE + 0x58))



int main(void) {
 80001fc:	b480      	push	{r7}
 80001fe:	b085      	sub	sp, #20
 8000200:	af00      	add	r7, sp, #0
	// your code goes here
	RCC_AHB2ENR |= (1u << 1); // emable gpio port B clock
 8000202:	4b8d      	ldr	r3, [pc, #564]	@ (8000438 <main+0x23c>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a8c      	ldr	r2, [pc, #560]	@ (8000438 <main+0x23c>)
 8000208:	f043 0302 	orr.w	r3, r3, #2
 800020c:	6013      	str	r3, [r2, #0]
	RCC_AHB2ENR |= (1u << 2); // enable gpio port C clock
 800020e:	4b8a      	ldr	r3, [pc, #552]	@ (8000438 <main+0x23c>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4a89      	ldr	r2, [pc, #548]	@ (8000438 <main+0x23c>)
 8000214:	f043 0304 	orr.w	r3, r3, #4
 8000218:	6013      	str	r3, [r2, #0]
	RCC_APB2ENR |= (1u << 0); // Enable SYSCFG clock
 800021a:	4b88      	ldr	r3, [pc, #544]	@ (800043c <main+0x240>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	4a87      	ldr	r2, [pc, #540]	@ (800043c <main+0x240>)
 8000220:	f043 0301 	orr.w	r3, r3, #1
 8000224:	6013      	str	r3, [r2, #0]
	RCC_APB1ENR1 |= (1u << 2); // Enable timer 2 clock
 8000226:	4b86      	ldr	r3, [pc, #536]	@ (8000440 <main+0x244>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	4a85      	ldr	r2, [pc, #532]	@ (8000440 <main+0x244>)
 800022c:	f043 0304 	orr.w	r3, r3, #4
 8000230:	6013      	str	r3, [r2, #0]


	// CONFIGURE LED1 OUTPUT
	GPIOC_MODER &= ~(0x3 << (LED1_num*2));
 8000232:	4b84      	ldr	r3, [pc, #528]	@ (8000444 <main+0x248>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	4a83      	ldr	r2, [pc, #524]	@ (8000444 <main+0x248>)
 8000238:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800023c:	6013      	str	r3, [r2, #0]
	GPIOC_MODER |= (0x1 << (LED1_num*2));
 800023e:	4b81      	ldr	r3, [pc, #516]	@ (8000444 <main+0x248>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	4a80      	ldr	r2, [pc, #512]	@ (8000444 <main+0x248>)
 8000244:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000248:	6013      	str	r3, [r2, #0]
	GPIOC_OTYPER &= ~(1u << LED1_num);
 800024a:	4b7f      	ldr	r3, [pc, #508]	@ (8000448 <main+0x24c>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	4a7e      	ldr	r2, [pc, #504]	@ (8000448 <main+0x24c>)
 8000250:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000254:	6013      	str	r3, [r2, #0]
	GPIOC_OSPEEDR &= ~(0x3 << (LED1_num * 2));
 8000256:	4b7d      	ldr	r3, [pc, #500]	@ (800044c <main+0x250>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	4a7c      	ldr	r2, [pc, #496]	@ (800044c <main+0x250>)
 800025c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000260:	6013      	str	r3, [r2, #0]
	GPIOC_PUPDR &= ~(0x3 << (LED1_num * 2));
 8000262:	4b7b      	ldr	r3, [pc, #492]	@ (8000450 <main+0x254>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	4a7a      	ldr	r2, [pc, #488]	@ (8000450 <main+0x254>)
 8000268:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800026c:	6013      	str	r3, [r2, #0]

	// CONFIGURE LED2 OUTPUT
	GPIOB_MODER &= ~(0x3 << (LED2_num*2));
 800026e:	4b79      	ldr	r3, [pc, #484]	@ (8000454 <main+0x258>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	4a78      	ldr	r2, [pc, #480]	@ (8000454 <main+0x258>)
 8000274:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000278:	6013      	str	r3, [r2, #0]
	GPIOB_MODER |= (0x1 << (LED2_num*2));
 800027a:	4b76      	ldr	r3, [pc, #472]	@ (8000454 <main+0x258>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4a75      	ldr	r2, [pc, #468]	@ (8000454 <main+0x258>)
 8000280:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000284:	6013      	str	r3, [r2, #0]
	GPIOB_OTYPER &= ~(1u << LED2_num);
 8000286:	4b74      	ldr	r3, [pc, #464]	@ (8000458 <main+0x25c>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	4a73      	ldr	r2, [pc, #460]	@ (8000458 <main+0x25c>)
 800028c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000290:	6013      	str	r3, [r2, #0]
	GPIOB_OSPEEDR &= ~(0x3 << (LED2_num * 2));
 8000292:	4b72      	ldr	r3, [pc, #456]	@ (800045c <main+0x260>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	4a71      	ldr	r2, [pc, #452]	@ (800045c <main+0x260>)
 8000298:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800029c:	6013      	str	r3, [r2, #0]
	GPIOB_PUPDR &= ~(0x3 << (LED2_num * 2));
 800029e:	4b70      	ldr	r3, [pc, #448]	@ (8000460 <main+0x264>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	4a6f      	ldr	r2, [pc, #444]	@ (8000460 <main+0x264>)
 80002a4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80002a8:	6013      	str	r3, [r2, #0]

	// CONFIGURE LED3 OUTPUT
	GPIOB_MODER &= ~(0x3 << (LED3_num*2));
 80002aa:	4b6a      	ldr	r3, [pc, #424]	@ (8000454 <main+0x258>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	4a69      	ldr	r2, [pc, #420]	@ (8000454 <main+0x258>)
 80002b0:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 80002b4:	6013      	str	r3, [r2, #0]
	GPIOB_MODER |= (0x1 << (LED3_num*2));
 80002b6:	4b67      	ldr	r3, [pc, #412]	@ (8000454 <main+0x258>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	4a66      	ldr	r2, [pc, #408]	@ (8000454 <main+0x258>)
 80002bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80002c0:	6013      	str	r3, [r2, #0]
	GPIOB_OTYPER &= ~(1u << LED3_num);
 80002c2:	4b65      	ldr	r3, [pc, #404]	@ (8000458 <main+0x25c>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	4a64      	ldr	r2, [pc, #400]	@ (8000458 <main+0x25c>)
 80002c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80002cc:	6013      	str	r3, [r2, #0]
	GPIOB_OSPEEDR &= ~(0x3 << (LED3_num * 2));
 80002ce:	4b63      	ldr	r3, [pc, #396]	@ (800045c <main+0x260>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	4a62      	ldr	r2, [pc, #392]	@ (800045c <main+0x260>)
 80002d4:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 80002d8:	6013      	str	r3, [r2, #0]
	GPIOB_PUPDR &= ~(0x3 << (LED3_num * 2));
 80002da:	4b61      	ldr	r3, [pc, #388]	@ (8000460 <main+0x264>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	4a60      	ldr	r2, [pc, #384]	@ (8000460 <main+0x264>)
 80002e0:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 80002e4:	6013      	str	r3, [r2, #0]

	// FLASH LEDs to confirm working
	GPIOC_ODR |= (1u << LED1_num);
 80002e6:	4b5f      	ldr	r3, [pc, #380]	@ (8000464 <main+0x268>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	4a5e      	ldr	r2, [pc, #376]	@ (8000464 <main+0x268>)
 80002ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80002f0:	6013      	str	r3, [r2, #0]
	GPIOB_ODR |= (1u << LED2_num);
 80002f2:	4b5d      	ldr	r3, [pc, #372]	@ (8000468 <main+0x26c>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	4a5c      	ldr	r2, [pc, #368]	@ (8000468 <main+0x26c>)
 80002f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80002fc:	6013      	str	r3, [r2, #0]
	GPIOB_ODR |= (1u << LED3_num);
 80002fe:	4b5a      	ldr	r3, [pc, #360]	@ (8000468 <main+0x26c>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	4a59      	ldr	r2, [pc, #356]	@ (8000468 <main+0x26c>)
 8000304:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000308:	6013      	str	r3, [r2, #0]
	int j = 200000;
 800030a:	4b58      	ldr	r3, [pc, #352]	@ (800046c <main+0x270>)
 800030c:	60fb      	str	r3, [r7, #12]
	while(j>0) { j--; }
 800030e:	e002      	b.n	8000316 <main+0x11a>
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	3b01      	subs	r3, #1
 8000314:	60fb      	str	r3, [r7, #12]
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	2b00      	cmp	r3, #0
 800031a:	dcf9      	bgt.n	8000310 <main+0x114>
	GPIOC_ODR &= ~(1u << LED1_num);
 800031c:	4b51      	ldr	r3, [pc, #324]	@ (8000464 <main+0x268>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a50      	ldr	r2, [pc, #320]	@ (8000464 <main+0x268>)
 8000322:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000326:	6013      	str	r3, [r2, #0]
	GPIOB_ODR &= ~(1u << LED2_num);
 8000328:	4b4f      	ldr	r3, [pc, #316]	@ (8000468 <main+0x26c>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a4e      	ldr	r2, [pc, #312]	@ (8000468 <main+0x26c>)
 800032e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000332:	6013      	str	r3, [r2, #0]
	GPIOB_ODR &= ~(1u << LED3_num);
 8000334:	4b4c      	ldr	r3, [pc, #304]	@ (8000468 <main+0x26c>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a4b      	ldr	r2, [pc, #300]	@ (8000468 <main+0x26c>)
 800033a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800033e:	6013      	str	r3, [r2, #0]


	// CONFIGURE PUSH BUTTON INPUT
	GPIOC_MODER &= ~(0x3 << (BUTTON_pin*2)); // set to 00: input mode
 8000340:	4b40      	ldr	r3, [pc, #256]	@ (8000444 <main+0x248>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a3f      	ldr	r2, [pc, #252]	@ (8000444 <main+0x248>)
 8000346:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800034a:	6013      	str	r3, [r2, #0]
	GPIOC_OTYPER &= ~(0b1 << BUTTON_pin); // set to 0: reset state
 800034c:	4b3e      	ldr	r3, [pc, #248]	@ (8000448 <main+0x24c>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a3d      	ldr	r2, [pc, #244]	@ (8000448 <main+0x24c>)
 8000352:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000356:	6013      	str	r3, [r2, #0]
	GPIOC_OSPEEDR &= ~(0b00 << (BUTTON_pin * 2)); // N/A
 8000358:	4b3c      	ldr	r3, [pc, #240]	@ (800044c <main+0x250>)
 800035a:	4a3c      	ldr	r2, [pc, #240]	@ (800044c <main+0x250>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	6013      	str	r3, [r2, #0]
//	//GPIOC_PUPDR |= (0b10 << (BUTTON_pin * 2)); // enable pull-up
//	GPIOC_PUPDR |= (0b01 << (BUTTON_pin * 2)); // enable pull-down


	// CONFIGURE push button interrupt
	SYSCFG_EXTICR4 &= ~(0xF << 4); // clear interrupt 13
 8000360:	4b43      	ldr	r3, [pc, #268]	@ (8000470 <main+0x274>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a42      	ldr	r2, [pc, #264]	@ (8000470 <main+0x274>)
 8000366:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800036a:	6013      	str	r3, [r2, #0]
	SYSCFG_EXTICR4 |= (0x2 << 4); // port C
 800036c:	4b40      	ldr	r3, [pc, #256]	@ (8000470 <main+0x274>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a3f      	ldr	r2, [pc, #252]	@ (8000470 <main+0x274>)
 8000372:	f043 0320 	orr.w	r3, r3, #32
 8000376:	6013      	str	r3, [r2, #0]
	EXTI_IMR1 |= (0b1 << BUTTON_pin);   // unmask EXTI13
 8000378:	4b3e      	ldr	r3, [pc, #248]	@ (8000474 <main+0x278>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a3d      	ldr	r2, [pc, #244]	@ (8000474 <main+0x278>)
 800037e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000382:	6013      	str	r3, [r2, #0]
		//	EXTI_RTSR1 |= (1 << BUTTON_pin);  // enable rising edge (button press)
		//	EXTI_FTSR1 &= ~(1 << BUTTON_pin); // disable falling edge (button release)
	EXTI_RTSR1 &= ~(0b1 << BUTTON_pin);  // disable rising edge (button press)
 8000384:	4b3c      	ldr	r3, [pc, #240]	@ (8000478 <main+0x27c>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a3b      	ldr	r2, [pc, #236]	@ (8000478 <main+0x27c>)
 800038a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800038e:	6013      	str	r3, [r2, #0]
	EXTI_FTSR1 |= (0b1 << BUTTON_pin); // enable falling edge (button release)
 8000390:	4b3a      	ldr	r3, [pc, #232]	@ (800047c <main+0x280>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a39      	ldr	r2, [pc, #228]	@ (800047c <main+0x280>)
 8000396:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800039a:	6013      	str	r3, [r2, #0]
	EXTI_PR1 |= (0b1 << 13); // clear pending flag
 800039c:	4b38      	ldr	r3, [pc, #224]	@ (8000480 <main+0x284>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a37      	ldr	r2, [pc, #220]	@ (8000480 <main+0x284>)
 80003a2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80003a6:	6013      	str	r3, [r2, #0]
	NVIC_ISER1 |= (1u << 8); // the handler for EXTI15-10 is IRQ #40, so reg 2, bit 8 (40-32=8)
 80003a8:	4b36      	ldr	r3, [pc, #216]	@ (8000484 <main+0x288>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a35      	ldr	r2, [pc, #212]	@ (8000484 <main+0x288>)
 80003ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003b2:	6013      	str	r3, [r2, #0]


	// CONFIGURE TIMER
	RCC_CR |= (0b1 << 8); // enable HSI16
 80003b4:	4b34      	ldr	r3, [pc, #208]	@ (8000488 <main+0x28c>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a33      	ldr	r2, [pc, #204]	@ (8000488 <main+0x28c>)
 80003ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003be:	6013      	str	r3, [r2, #0]
	// while((RCC_CR & (0b1 << 10)) == 0);
	RCC_CFGR &= ~(0b11); // clear System clock switch
 80003c0:	4b32      	ldr	r3, [pc, #200]	@ (800048c <main+0x290>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4a31      	ldr	r2, [pc, #196]	@ (800048c <main+0x290>)
 80003c6:	f023 0303 	bic.w	r3, r3, #3
 80003ca:	6013      	str	r3, [r2, #0]
	RCC_CFGR |= (0b01); // HSI16 clock selected.
 80003cc:	4b2f      	ldr	r3, [pc, #188]	@ (800048c <main+0x290>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a2e      	ldr	r2, [pc, #184]	@ (800048c <main+0x290>)
 80003d2:	f043 0301 	orr.w	r3, r3, #1
 80003d6:	6013      	str	r3, [r2, #0]
	// while ((RCC_CFGR & (0x3 << 2)) != (0x1 << 2)) { ; /* wait until SWS == 01 (HSI selected)*/ }
	unsigned int prescale = 63999; // 0b1111100111111111;
 80003d8:	f64f 13ff 	movw	r3, #63999	@ 0xf9ff
 80003dc:	607b      	str	r3, [r7, #4]
	unsigned int arr = 249;
 80003de:	23f9      	movs	r3, #249	@ 0xf9
 80003e0:	603b      	str	r3, [r7, #0]

	TIM4_PSC = prescale;
 80003e2:	4a2b      	ldr	r2, [pc, #172]	@ (8000490 <main+0x294>)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	6013      	str	r3, [r2, #0]
	TIM4_ARR = arr;
 80003e8:	4a2a      	ldr	r2, [pc, #168]	@ (8000494 <main+0x298>)
 80003ea:	683b      	ldr	r3, [r7, #0]
 80003ec:	6013      	str	r3, [r2, #0]

	TIM4_EGR |= 0x1; // event update
 80003ee:	4b2a      	ldr	r3, [pc, #168]	@ (8000498 <main+0x29c>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4a29      	ldr	r2, [pc, #164]	@ (8000498 <main+0x29c>)
 80003f4:	f043 0301 	orr.w	r3, r3, #1
 80003f8:	6013      	str	r3, [r2, #0]
	TIM4_DIER |= 0x1; // Update interrupt enabled
 80003fa:	4b28      	ldr	r3, [pc, #160]	@ (800049c <main+0x2a0>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	4a27      	ldr	r2, [pc, #156]	@ (800049c <main+0x2a0>)
 8000400:	f043 0301 	orr.w	r3, r3, #1
 8000404:	6013      	str	r3, [r2, #0]
	TIM4_CR1 |= 0x1; // Counter enabled
 8000406:	4b26      	ldr	r3, [pc, #152]	@ (80004a0 <main+0x2a4>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4a25      	ldr	r2, [pc, #148]	@ (80004a0 <main+0x2a4>)
 800040c:	f043 0301 	orr.w	r3, r3, #1
 8000410:	6013      	str	r3, [r2, #0]

	NVIC_ISER0 |= (1u << 30); // enable TIM4 interrupt line, IRQ 30 (page 469 in manual)
 8000412:	4b24      	ldr	r3, [pc, #144]	@ (80004a4 <main+0x2a8>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	4a23      	ldr	r2, [pc, #140]	@ (80004a4 <main+0x2a8>)
 8000418:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800041c:	6013      	str	r3, [r2, #0]



	unsigned int i = 0;
 800041e:	2300      	movs	r3, #0
 8000420:	60bb      	str	r3, [r7, #8]
	while(1) {
		i++;
 8000422:	68bb      	ldr	r3, [r7, #8]
 8000424:	3301      	adds	r3, #1
 8000426:	60bb      	str	r3, [r7, #8]
		if (i > 100000) i = 0;  // turn LED on
 8000428:	68bb      	ldr	r3, [r7, #8]
 800042a:	4a1f      	ldr	r2, [pc, #124]	@ (80004a8 <main+0x2ac>)
 800042c:	4293      	cmp	r3, r2
 800042e:	d9f8      	bls.n	8000422 <main+0x226>
 8000430:	2300      	movs	r3, #0
 8000432:	60bb      	str	r3, [r7, #8]
		i++;
 8000434:	e7f5      	b.n	8000422 <main+0x226>
 8000436:	bf00      	nop
 8000438:	4002104c 	.word	0x4002104c
 800043c:	40021060 	.word	0x40021060
 8000440:	40021058 	.word	0x40021058
 8000444:	48000800 	.word	0x48000800
 8000448:	48000804 	.word	0x48000804
 800044c:	48000808 	.word	0x48000808
 8000450:	4800080c 	.word	0x4800080c
 8000454:	48000400 	.word	0x48000400
 8000458:	48000404 	.word	0x48000404
 800045c:	48000408 	.word	0x48000408
 8000460:	4800040c 	.word	0x4800040c
 8000464:	48000814 	.word	0x48000814
 8000468:	48000414 	.word	0x48000414
 800046c:	00030d40 	.word	0x00030d40
 8000470:	40010014 	.word	0x40010014
 8000474:	40010400 	.word	0x40010400
 8000478:	40010408 	.word	0x40010408
 800047c:	4001040c 	.word	0x4001040c
 8000480:	40010414 	.word	0x40010414
 8000484:	e000e104 	.word	0xe000e104
 8000488:	40021000 	.word	0x40021000
 800048c:	40021008 	.word	0x40021008
 8000490:	40000828 	.word	0x40000828
 8000494:	4000082c 	.word	0x4000082c
 8000498:	40000814 	.word	0x40000814
 800049c:	4000080c 	.word	0x4000080c
 80004a0:	40000800 	.word	0x40000800
 80004a4:	e000e100 	.word	0xe000e100
 80004a8:	000186a0 	.word	0x000186a0

080004ac <EXTI15_10_IRQHandler>:
	}
}


void EXTI15_10_IRQHandler(void) {
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
	for (volatile int i = 0; i < 1000; i++); // debounce
 80004b2:	2300      	movs	r3, #0
 80004b4:	607b      	str	r3, [r7, #4]
 80004b6:	e002      	b.n	80004be <EXTI15_10_IRQHandler+0x12>
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	3301      	adds	r3, #1
 80004bc:	607b      	str	r3, [r7, #4]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80004c4:	dbf8      	blt.n	80004b8 <EXTI15_10_IRQHandler+0xc>
    // Toggle the LED state
	LED_State = !LED_State;  // flip 0 <-> 1
 80004c6:	4b0b      	ldr	r3, [pc, #44]	@ (80004f4 <EXTI15_10_IRQHandler+0x48>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	bf0c      	ite	eq
 80004ce:	2301      	moveq	r3, #1
 80004d0:	2300      	movne	r3, #0
 80004d2:	b2db      	uxtb	r3, r3
 80004d4:	461a      	mov	r2, r3
 80004d6:	4b07      	ldr	r3, [pc, #28]	@ (80004f4 <EXTI15_10_IRQHandler+0x48>)
 80004d8:	601a      	str	r2, [r3, #0]
//        GPIOB_ODR |= (0b1 << LED2_num);  // turn LED on
//    } else {
//        GPIOB_ODR &= ~(0b1 << LED2_num); // turn LED off
//    }

    EXTI_PR1 |= (0b1 << 13);  // Clear the EXTI interrupt pending bit
 80004da:	4b07      	ldr	r3, [pc, #28]	@ (80004f8 <EXTI15_10_IRQHandler+0x4c>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a06      	ldr	r2, [pc, #24]	@ (80004f8 <EXTI15_10_IRQHandler+0x4c>)
 80004e0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80004e4:	6013      	str	r3, [r2, #0]
}
 80004e6:	bf00      	nop
 80004e8:	370c      	adds	r7, #12
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	2000001c 	.word	0x2000001c
 80004f8:	40010414 	.word	0x40010414

080004fc <TIM4_IRQHandler>:

void TIM4_IRQHandler(void) {
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
	if (LED_State) {
 8000500:	4b26      	ldr	r3, [pc, #152]	@ (800059c <TIM4_IRQHandler+0xa0>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d03e      	beq.n	8000586 <TIM4_IRQHandler+0x8a>
		if (LED_cycle_state == 0) {
 8000508:	4b25      	ldr	r3, [pc, #148]	@ (80005a0 <TIM4_IRQHandler+0xa4>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d111      	bne.n	8000534 <TIM4_IRQHandler+0x38>
			GPIOC_ODR |= (0b1 << LED1_num);  // turn LED on
 8000510:	4b24      	ldr	r3, [pc, #144]	@ (80005a4 <TIM4_IRQHandler+0xa8>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a23      	ldr	r2, [pc, #140]	@ (80005a4 <TIM4_IRQHandler+0xa8>)
 8000516:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800051a:	6013      	str	r3, [r2, #0]
			GPIOB_ODR &= ~(0b1 << LED3_num); // turn LED off
 800051c:	4b22      	ldr	r3, [pc, #136]	@ (80005a8 <TIM4_IRQHandler+0xac>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a21      	ldr	r2, [pc, #132]	@ (80005a8 <TIM4_IRQHandler+0xac>)
 8000522:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000526:	6013      	str	r3, [r2, #0]
			LED_cycle_state++;
 8000528:	4b1d      	ldr	r3, [pc, #116]	@ (80005a0 <TIM4_IRQHandler+0xa4>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	3301      	adds	r3, #1
 800052e:	4a1c      	ldr	r2, [pc, #112]	@ (80005a0 <TIM4_IRQHandler+0xa4>)
 8000530:	6013      	str	r3, [r2, #0]
 8000532:	e028      	b.n	8000586 <TIM4_IRQHandler+0x8a>
		} else if (LED_cycle_state == 1) {
 8000534:	4b1a      	ldr	r3, [pc, #104]	@ (80005a0 <TIM4_IRQHandler+0xa4>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2b01      	cmp	r3, #1
 800053a:	d111      	bne.n	8000560 <TIM4_IRQHandler+0x64>
			GPIOB_ODR |= (0b1 << LED2_num);  // turn LED on
 800053c:	4b1a      	ldr	r3, [pc, #104]	@ (80005a8 <TIM4_IRQHandler+0xac>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a19      	ldr	r2, [pc, #100]	@ (80005a8 <TIM4_IRQHandler+0xac>)
 8000542:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000546:	6013      	str	r3, [r2, #0]
			GPIOC_ODR &= ~(0b1 << LED1_num); // turn LED off
 8000548:	4b16      	ldr	r3, [pc, #88]	@ (80005a4 <TIM4_IRQHandler+0xa8>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a15      	ldr	r2, [pc, #84]	@ (80005a4 <TIM4_IRQHandler+0xa8>)
 800054e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000552:	6013      	str	r3, [r2, #0]
			LED_cycle_state++;
 8000554:	4b12      	ldr	r3, [pc, #72]	@ (80005a0 <TIM4_IRQHandler+0xa4>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	3301      	adds	r3, #1
 800055a:	4a11      	ldr	r2, [pc, #68]	@ (80005a0 <TIM4_IRQHandler+0xa4>)
 800055c:	6013      	str	r3, [r2, #0]
 800055e:	e012      	b.n	8000586 <TIM4_IRQHandler+0x8a>
		} else if (LED_cycle_state == 2) {
 8000560:	4b0f      	ldr	r3, [pc, #60]	@ (80005a0 <TIM4_IRQHandler+0xa4>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	2b02      	cmp	r3, #2
 8000566:	d10e      	bne.n	8000586 <TIM4_IRQHandler+0x8a>
			GPIOB_ODR |= (0b1 << LED3_num);  // turn LED on
 8000568:	4b0f      	ldr	r3, [pc, #60]	@ (80005a8 <TIM4_IRQHandler+0xac>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a0e      	ldr	r2, [pc, #56]	@ (80005a8 <TIM4_IRQHandler+0xac>)
 800056e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000572:	6013      	str	r3, [r2, #0]
			GPIOB_ODR &= ~(0b1 << LED2_num); // turn LED off
 8000574:	4b0c      	ldr	r3, [pc, #48]	@ (80005a8 <TIM4_IRQHandler+0xac>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a0b      	ldr	r2, [pc, #44]	@ (80005a8 <TIM4_IRQHandler+0xac>)
 800057a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800057e:	6013      	str	r3, [r2, #0]
			LED_cycle_state = 0;
 8000580:	4b07      	ldr	r3, [pc, #28]	@ (80005a0 <TIM4_IRQHandler+0xa4>)
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
		}
	}
	TIM4_SR &= ~(0b1);  // Clear the EXTI interrupt pending bit
 8000586:	4b09      	ldr	r3, [pc, #36]	@ (80005ac <TIM4_IRQHandler+0xb0>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4a08      	ldr	r2, [pc, #32]	@ (80005ac <TIM4_IRQHandler+0xb0>)
 800058c:	f023 0301 	bic.w	r3, r3, #1
 8000590:	6013      	str	r3, [r2, #0]
}
 8000592:	bf00      	nop
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr
 800059c:	2000001c 	.word	0x2000001c
 80005a0:	20000020 	.word	0x20000020
 80005a4:	48000814 	.word	0x48000814
 80005a8:	48000414 	.word	0x48000414
 80005ac:	40000810 	.word	0x40000810

080005b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005b0:	480d      	ldr	r0, [pc, #52]	@ (80005e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005b4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b8:	480c      	ldr	r0, [pc, #48]	@ (80005ec <LoopForever+0x6>)
  ldr r1, =_edata
 80005ba:	490d      	ldr	r1, [pc, #52]	@ (80005f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005bc:	4a0d      	ldr	r2, [pc, #52]	@ (80005f4 <LoopForever+0xe>)
  movs r3, #0
 80005be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005c0:	e002      	b.n	80005c8 <LoopCopyDataInit>

080005c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005c6:	3304      	adds	r3, #4

080005c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005cc:	d3f9      	bcc.n	80005c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ce:	4a0a      	ldr	r2, [pc, #40]	@ (80005f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005d0:	4c0a      	ldr	r4, [pc, #40]	@ (80005fc <LoopForever+0x16>)
  movs r3, #0
 80005d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d4:	e001      	b.n	80005da <LoopFillZerobss>

080005d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d8:	3204      	adds	r2, #4

080005da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005dc:	d3fb      	bcc.n	80005d6 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80005de:	f000 f811 	bl	8000604 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 80005e2:	f7ff fe0b 	bl	80001fc <main>

080005e6 <LoopForever>:

LoopForever:
  b LoopForever
 80005e6:	e7fe      	b.n	80005e6 <LoopForever>
  ldr   r0, =_estack
 80005e8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80005ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005f0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80005f4:	0800066c 	.word	0x0800066c
  ldr r2, =_sbss
 80005f8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80005fc:	20000024 	.word	0x20000024

08000600 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000600:	e7fe      	b.n	8000600 <ADC1_IRQHandler>
	...

08000604 <__libc_init_array>:
 8000604:	b570      	push	{r4, r5, r6, lr}
 8000606:	4d0d      	ldr	r5, [pc, #52]	@ (800063c <__libc_init_array+0x38>)
 8000608:	4c0d      	ldr	r4, [pc, #52]	@ (8000640 <__libc_init_array+0x3c>)
 800060a:	1b64      	subs	r4, r4, r5
 800060c:	10a4      	asrs	r4, r4, #2
 800060e:	2600      	movs	r6, #0
 8000610:	42a6      	cmp	r6, r4
 8000612:	d109      	bne.n	8000628 <__libc_init_array+0x24>
 8000614:	4d0b      	ldr	r5, [pc, #44]	@ (8000644 <__libc_init_array+0x40>)
 8000616:	4c0c      	ldr	r4, [pc, #48]	@ (8000648 <__libc_init_array+0x44>)
 8000618:	f000 f818 	bl	800064c <_init>
 800061c:	1b64      	subs	r4, r4, r5
 800061e:	10a4      	asrs	r4, r4, #2
 8000620:	2600      	movs	r6, #0
 8000622:	42a6      	cmp	r6, r4
 8000624:	d105      	bne.n	8000632 <__libc_init_array+0x2e>
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f855 3b04 	ldr.w	r3, [r5], #4
 800062c:	4798      	blx	r3
 800062e:	3601      	adds	r6, #1
 8000630:	e7ee      	b.n	8000610 <__libc_init_array+0xc>
 8000632:	f855 3b04 	ldr.w	r3, [r5], #4
 8000636:	4798      	blx	r3
 8000638:	3601      	adds	r6, #1
 800063a:	e7f2      	b.n	8000622 <__libc_init_array+0x1e>
 800063c:	08000664 	.word	0x08000664
 8000640:	08000664 	.word	0x08000664
 8000644:	08000664 	.word	0x08000664
 8000648:	08000668 	.word	0x08000668

0800064c <_init>:
 800064c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800064e:	bf00      	nop
 8000650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000652:	bc08      	pop	{r3}
 8000654:	469e      	mov	lr, r3
 8000656:	4770      	bx	lr

08000658 <_fini>:
 8000658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800065a:	bf00      	nop
 800065c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800065e:	bc08      	pop	{r3}
 8000660:	469e      	mov	lr, r3
 8000662:	4770      	bx	lr
